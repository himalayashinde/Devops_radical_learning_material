--Hello this document contains the basic commands that is useful for learning unix and docker--
--getintopc.com
-- ALWAYS RUN THE BELOW COMMAND WHEN YOU ARE RUNNING THE UNIX OS FOR THE FIRST TIME --
-- IT IS A STANDARD INDUSSTRY PRACTICE --
-- BUT IF RUNNING THIS COMMAND AFTER INSTALLING IT MAY CORRUPT OR BLOCK YOUR APP OR SERVICE FOR FURTHER USE--

1> yum upgrade [-y] -- It is useful for upgrading the unix OS packages that have not been yet upgraded
2> yum update  [-y] -- It is useful for updateing the unix OS pakages that have not been updated yet in OS librery
3> sudo su 			-- It helps to switch the user from guest to root login
4> sudo su [-]      -- It helps to switch to root destination folder directly
5> chmod [+x] [filename] -- It is useful command to change the file permission to executable mode
6> uname [-r] 		-- It is useful command to know OS version and kernel version 
7> sudo yum -y update -- Similar to 2nd command
8>	yum install httpd 
9>	systemctl start httpd 
10>	status httpd

-----------------------------------------

root@ip-172-31-41-83:~# docker run hello-world

Hello from Docker!
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
    (amd64)
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash

Share images, automate workflows, and more with a free Docker ID:
 https://hub.docker.com/

For more examples and ideas, visit:
 https://docs.docker.com/get-started/

----------------------------------

This command helps us to  see the images process running or not.

root@ip-172-31-41-83:~# docker images ps
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE


	
/var/www/html	
-- Docker Commands--
8>  sudo yum install -y docker -- This helps to install the docker into linux/UNIX OS.


---------------------------------------------------------------------------------------------------------------------------
9> docker info 	-- It helps to see the info of the docker installed on the system
---------------------------------------------------------------------------------------------------------------------------
root@ip-172-31-36-255:~# docker info
Client:
 Debug Mode: false

Server:
 Containers: 2
  Running: 0
  Paused: 0
  Stopped: 2
 Images: 3
 Server Version: 19.03.3
 Storage Driver: overlay2
  Backing Filesystem: extfs
  Supports d_type: true
  Native Overlay Diff: true
 Logging Driver: json-file
 Cgroup Driver: cgroupfs
 Plugins:
  Volume: local
  Network: bridge host ipvlan macvlan null overlay
  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog
 Swarm: inactive
 Runtimes: runc
 Default Runtime: runc
 Init Binary: docker-init
 containerd version: 894b81a4b802e4eb2a91d1ce216b8817763c29fb
 runc version: 425e105d5a03fabd737a126ad93d62a9eeede87f
 init version: fec3683
 Security Options:
  apparmor
  seccomp
   Profile: default
 Kernel Version: 4.15.0-1051-aws
 Operating System: Ubuntu 18.04.3 LTS
 OSType: linux
 Architecture: x86_64
 CPUs: 1
 Total Memory: 983.9MiB
 Name: ip-172-31-36-255
 ID: 72Q6:XU2A:7EYZ:HHEP:4RSI:FEQK:LPVS:AVDT:D54N:ZNSD:LXTG:GQZ6
 Docker Root Dir: /var/lib/docker
 Debug Mode: false
 Username: himalayashinde
 Registry: https://index.docker.io/v1/
 Labels:
 Experimental: false
 Insecure Registries:
  127.0.0.0/8
 Live Restore Enabled: false

WARNING: No swap limit support
---------------------------------------------------------------------------------------------------------------------------
10>  docker --version || docker -v -- It helps to see the vesion of the docker
	 docker version -- It gives detailed information of docker client and server engine
---------------------------------------------------------------------------------------------------------------------------

root@ip-172-31-36-255:~# docker --version
Docker version 19.03.3, build a872fc2f86

---------------------------------------------------------------------------------------------------------------------------
root@ip-172-31-36-255:~# docker version
Client: Docker Engine - Community
 Version:           19.03.3
 API version:       1.40
 Go version:        go1.12.10
 Git commit:        a872fc2f86
 Built:             Tue Oct  8 00:59:59 2019
 OS/Arch:           linux/amd64
 Experimental:      false

Server: Docker Engine - Community
 Engine:
  Version:          19.03.3
  API version:      1.40 (minimum version 1.12)
  Go version:       go1.12.10
  Git commit:       a872fc2f86
  Built:            Tue Oct  8 00:58:31 2019
  OS/Arch:          linux/amd64
  Experimental:     false
 containerd:
  Version:          1.2.6
  GitCommit:        894b81a4b802e4eb2a91d1ce216b8817763c29fb
 runc:
  Version:          1.0.0-rc8
  GitCommit:        425e105d5a03fabd737a126ad93d62a9eeede87f
 docker-init:
  Version:          0.18.0
  GitCommit:        fec3683

---------------------------------------------------------------------------------------------------------------------------

11> sudo service docker start -- Starts the docker service on the System
12> sudo usermod -a -G docker [username of the instance of AMI / OS] -- this can be used to avoid use of sudo command on every line

---------------------------------------------------------------------------------------------------------------------------
13> docker images 	-- shows the list of images of the docker available locally / local repository
---------------------------------------------------------------------------------------------------------------------------

root@ip-172-31-36-255:~# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
wild_card_bkp       latest              30c52dd2c0cb        3 days ago          64.2MB
ubuntu              latest              2ca708c1c9cc        3 weeks ago         64.2MB
hello-world         latest              fce289e99eb9        9 months ago        1.84kB

---------------------------------------------------------------------------------------------------------------------------
14> docker ps [-a]  -- to list out all the containers available.
---------------------------------------------------------------------------------------------------------------------------


root@ip-172-31-36-255:~# docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                        PORTS                  NAMES
73c35aa878a2        ubuntu              "/bin/bash"         3 days ago          Exited (255) 18 minutes ago   0.0.0.0:1901->88/tcp   wild_card
275f06e1e2a1        ubuntu              "/bin/bash"         3 days ago          Exited (255) 18 minutes ago   0.0.0.0:1900->22/tcp   zebra_cross

---------------------------------------------------------------------------------------------------------------------------
15> docker run [image_name] -- this is used to run the docker image.
---------------------------------------------------------------------------------------------------------------------------




---------------------------------------------------------------------------------------------------------------------------

16> sudo service docker stop -- this is used to stop the docker image/container.
17> sudo yum remove docker -- It is used to remove docker from OS/environment 
18> docker --help -- this command returns the list of commands available in docker along with possible flag options
19> docker pull  -- this comma`nd pulls the new docker image from docker hub
20> docker run   -- This command executes a docker image on your local repository and create a running conatiner out of it.
21> docker build -- This command is used to compile the dockerfile, for building custom docker images based on our choice./ untar the file 
22> docker login -- logs into the hub.docker.com to pushthe images to it
23> docker push --  pushes the build image to hub.docker.com to your user id
24> docker stop --  Stops the container whose name or id is provided
25> docker kill -- kills or force closes the container that is defined to kill
26> docker rm --  It removes the container whose id or name tag is provided
27> docker rmi -- it removes the image name provided
28> docker exec -- to exectute a command inside a running conatiner
29> docker commit -- 
30> docker import  -- 
31> docker export -- 
32> docker container -- 
33> docker compose -- 
34> docker swarm -- 
35> docker service -- 
36> docker search -- It search the docker image is available or not
37> docker rm $(docker ps -a -q) -- It removes  all container in one command
38> docker run -it ubuntu /bin/bash -- to keep the container running in bash mode 
39> CTRL + P +Q -- to exit from container without stopping it or shutting down it.
40> docker start -a -i $(docker ps -q -l) -- It helps to login to the last logged out container or exited container.
	docker start -a -i [container id] -- you can log into a exited container using this command
 {	
	docker start start a container (requires name or ID)
	-a attach to container
	-i interactive mode
	docker ps List containers
	-q list only container IDs
	-l list only last created container
 }
---------------------------------------------
1> Hypervisior
2> Virtualization
3> docker engine
4> Container
5> Docker engine
6> Alpine OS
7> Images
8> docker file
9> dockcer compose
10> Docker swarm

---------------------------------------------------------------------------------------------
Below command gives the list of available commands for the docker
---------------------------------------------------------------------------------------------
root@ip-172-31-44-212:~# docker --help

Usage:  docker [OPTIONS] COMMAND

A self-sufficient runtime for containers

Options:
      --config string      Location of client config files (default "/root/.docker")
  -D, --debug              Enable debug mode
  -H, --host list          Daemon socket(s) to connect to
  -l, --log-level string   Set the logging level ("debug"|"info"|"warn"|"error"|"fatal") (default "info")
      --tls                Use TLS; implied by --tlsverify
      --tlscacert string   Trust certs signed only by this CA (default "/root/.docker/ca.pem")
      --tlscert string     Path to TLS certificate file (default "/root/.docker/cert.pem")
      --tlskey string      Path to TLS key file (default "/root/.docker/key.pem")
      --tlsverify          Use TLS and verify the remote
  -v, --version            Print version information and quit

Management Commands:
  builder     Manage builds
  config      Manage Docker configs
  container   Manage containers
  engine      Manage the docker engine
  image       Manage images
  network     Manage networks
  node        Manage Swarm nodes
  plugin      Manage plugins
  secret      Manage Docker secrets
  service     Manage services
  stack       Manage Docker stacks
  swarm       Manage Swarm
  system      Manage Docker
  trust       Manage trust on Docker images
  volume      Manage volumes

Commands:
  attach      Attach local standard input, output, and error streams to a running container
  build       Build an image from a Dockerfile
  commit      Create a new image from a container's changes
  cp          Copy files/folders between a container and the local filesystem
  create      Create a new container
  diff        Inspect changes to files or directories on a container's filesystem
  events      Get real time events from the server
  exec        Run a command in a running container
  export      Export a container's filesystem as a tar archive
  history     Show the history of an image
  images      List images
  import      Import the contents from a tarball to create a filesystem image
  info        Display system-wide information
  inspect     Return low-level information on Docker objects
  kill        Kill one or more running containers
  load        Load an image from a tar archive or STDIN
  login       Log in to a Docker registry
  logout      Log out from a Docker registry
  logs        Fetch the logs of a container
  pause       Pause all processes within one or more containers
  port        List port mappings or a specific mapping for the container
  ps          List containers
  pull        Pull an image or a repository from a registry
  push        Push an image or a repository to a registry
  rename      Rename a container
  restart     Restart one or more containers
  rm          Remove one or more containers
  rmi         Remove one or more images
  run         Run a command in a new container
  save        Save one or more images to a tar archive (streamed to STDOUT by default)
  search      Search the Docker Hub for images
  start       Start one or more stopped containers
  stats       Display a live stream of container(s) resource usage statistics
  stop        Stop one or more running containers
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
  top         Display the running processes of a container
  unpause     Unpause all processes within one or more containers
  update      Update configuration of one or more containers
  version     Show the Docker version information
  wait        Block until one or more containers stop, then print their exit codes


--------------------------------------------------------------------------------------------------------------
Port mapping and volume mapping
--------------------------------------------------------------------------------------------------------------
docker run -t --name zebra_cross -d -p 1900:22 -v /lamborgini:/lamborgini ubuntu
--------------------------------------------------------------------------------------------------------------

root@ip-172-31-36-255:~# docker run -t --name zebra_cross -d -p 1900:22 -v /lamborgini:/lamborgini ubuntu

Unable to find image 'ubuntu:latest' locally
latest: Pulling from library/ubuntu
5667fdb72017: Pull complete
d83811f270d5: Pull complete
ee671aafb583: Pull complete
7fc152dfb3a6: Pull complete
Digest: sha256:b88f8848e9a1a4e4558ba7cfc4acc5879e1d0e7ac06401409062ad2627e6fb58
Status: Downloaded newer image for ubuntu:latest
275f06e1e2a1dd62875704eceb92bcc0bd5695c0c1f711162bd633942a20fe22

root@ip-172-31-36-255:~# docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED              STATUS                          PORTS                  NAMES
275f06e1e2a1        ubuntu              "/bin/bash"         18 seconds ago       Up 17 seconds                   0.0.0.0:1900->22/tcp   zebra_cross
8057992e04fd        hello-world         "/hello"            About a minute ago   Exited (0) About a minute ago                          sweet_goldwasser
root@ip-172-31-36-255:~#
--------------------------------------------------------------------------------------------------------------------

Taking backup of container 
--------------------------------------------------------------------------------------------------------------------
root@ip-172-31-36-255:~# docker commit -p 73c35aa878a2 wild_card_bkp
sha256:30c52dd2c0cb9e68f155eb3a73fe45183fbe8c1894598fbf820b98b1b9120377

root@ip-172-31-36-255:~# docker commit -p 73c35aa878a2 wild_card_bkp
sha256:30c52dd2c0cb9e68f155eb3a73fe45183fbe8c1894598fbf820b98b1b9120377
root@ip-172-31-36-255:~# clear
root@ip-172-31-36-255:~# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED              SIZE
wild_card_bkp       latest              30c52dd2c0cb        About a minute ago   64.2MB
ubuntu              latest              2ca708c1c9cc        2 weeks ago          64.2MB
hello-world         latest              fce289e99eb9        9 months ago         1.84kB
root@ip-172-31-36-255:~#
--------------------------------------------------------------------------------------------------------------------
Docker hub login to push the data 
--------------------------------------------------------------------------------------------------------------------
root@ip-172-31-36-255:~# docker login
Login with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.
Username: himalayashinde
Password:
WARNING! Your password will be stored unencrypted in /root/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credentials-store

Login Succeeded
--------------------------------------------------------------------------------------------------------------------